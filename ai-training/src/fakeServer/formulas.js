import data from './db.json'
import { SVD } from 'svd-js'
import { eigs, inv, multiply, transpose } from 'mathjs'
var svm = require("svm");
// note, mathjs reads arrays as rows, i.e.
// A = [[0, 1, 2]
// [3, 4, 5]
// [6, 7, 8]]

let svmPrototype = new svm.SVM()

const formulas = {
  // ------------------------- STANDARDIZATION & SVD -------------------------
  'standardize': (X) => {
    let Xsum = 0
    for (let i of X) Xsum += i
    const Xmean = Xsum / X.length
    let numerator = 0
    for (let i of X) numerator += (i - Xmean) ** 2
    const SD = Math.sqrt(numerator / X.length)
    let standardX = []
    for (let i of X) standardX.push((i - Xmean) / SD)
    return standardX
  },
  'sparseTransform': (sparseMatrix) => {
    let newData = [...sparseMatrix]
    for (let i = 0; i < newData.length; i++) {
      if (newData[i] == 0) newData[i] = 0.1
    }
    return newData
  },
  'truncatedSVD': (dataPoint, matrixLength, percent = 0.95) => {
    // creates the matrix from vector
    let a = []
    let i = 0
    let j = matrixLength

    while (j <= matrixLength ** 2) {
      a.push(dataPoint.slice(i, j))
      i += matrixLength
      j += matrixLength
    }

    // perform SVD
    const { u, v, q } = SVD(a)

    // sort out and calculate top eigenvalues
    let eigenvaluesSorted = [...q]
    eigenvaluesSorted.sort().reverse()
    let topEigenvalues = []
    let totalVariance = 0
    let explainedVariance = 0
    for (let i of eigenvaluesSorted) {
      totalVariance += i
    }
    for (let i of eigenvaluesSorted) {
      topEigenvalues.push(i)
      explainedVariance += i
      if (explainedVariance / totalVariance > percent) break
    }
    // create new U, V, Q
    let indexArray = []
    let newU = Array.from(Array(u.length), () => [])
    let newV = Array.from(Array(v.length), () => [])
    let newQ = []
    for (let i of topEigenvalues) {
      indexArray.push(q.indexOf(i))
    }
    for (let i = 0; i < indexArray.length; i++) {
      for (let j = 0; j < u.length; j++) {
        newU[j].push(u[j][indexArray[i]])
      }
      for (let j = 0; j < v.length; j++) {
        newV[j].push(v[j][indexArray[i]])
      }
      let tempArray = (Array(indexArray.length).fill(0))
      tempArray[i] = q[indexArray[i]]
      newQ.push(tempArray)
    }
    return (multiply(newU, newQ, transpose(newV)))
  },
  // Checking that your SVD is likely correct
  'Frobenius': (matA, matB) => {
    if (matA.length != matB.length || matA[0].length != matB[0].length) { return 'error, dimensions dont match' }
    let distance = 0
    for (let i = 0; i < matA.length; i++) {
      for (let j = 0; j < matA[0].length; j++) {
        distance += (matA[i][j] - matB[i][j]) ** 2
      }
    }
    return Math.sqrt(distance)
  },
  // ------------------------- COVARIANCE -------------------------
  // write covariance formula assumes matrix is array of arrays
  // X and Y are the number of the columns you want to get covariance of
  // dataset = [ [data data data], [data data data]] each array would be a column
  'covFunc': (X, Y) => {
    if (X.length != Y.length) return 'error mismatch length'
    var Xsum = 0;
    var Ysum = 0;
    for (let i = 0; i < X.length; i++) {
      Xsum += X[i]
      Ysum += Y[i]
    }
    const Xmean = Xsum / X.length
    const Ymean = Ysum / Y.length
    var numerator = 0
    for (let i = 0; i < X.length; i++) {
      numerator += (X[i] - Xmean) * (Y[i] - Ymean)
    }
    return numerator / (X.length - 1)
  },
  // covariance matrix formula, data is expected to be the matrix of the dataset
  'covMat': (data) => {
    let matrix = []
    for (let i = 0; i < data[0].length; i++) {
      let array = []
      for (let j = 0; j < data[0].length; j++) {
        if (j < i) array.push(matrix[j][i])
        else {
          let X = []
          let Y = []
          for (let k = 0; k < data.length; k++) {
            X.push(data[k][i])
            Y.push(data[k][j])
          }
          array.push(formulas.covFunc(X, Y))
        }
      }
      matrix.push(array)
    }
    return matrix
  },
  // ------------------------- EIGENS AND PROJECTIONS -------------------------
  // eigenvalues and vectors
  'eigen': (X) => {
    return eigs(X)
  },
  // projection matrix for future use?
  //A(A^tA)^âˆ’1 A^t=P
  'projection': (X) => {
    return multiply(X, inv(multiply(transpose(X), X)), transpose(X))
  },
  'projectVector': (X, v) => {
    const diff = v.length - X[0].length
    if (diff < 0) {
      alert('error, projecting into higher space')
      return
    }
    let zeroArray = Array(diff).fill(0)
    for (let i = 0; i < X.length; i++) {
      X[i] = X[i].concat(zeroArray)
    }
    return multiply(X, v)
  },
  // percent is in decimals i guess?
  'PCA': (dataSet, percent = 0.95) => {
    let covMat = formulas.covMat(dataSet)
    let eigen = formulas.eigen(covMat)
    let totalVariance = 0
    let explainedVariance = 0
    for (let i of eigen.values) totalVariance += i
    let eigenvaluesSorted = [...eigen.values]
    eigenvaluesSorted.sort().reverse()
    let topEigenvalues = []
    let featureMatrix = Array.from(Array(dataSet[0].length), () => [])
    for (let i of eigenvaluesSorted) {
      explainedVariance += i
      topEigenvalues.push(i)
      if (explainedVariance / totalVariance > percent) break
    }
    // need to find eigen vectors relevant to the highest eigenvalues and keep track of the feature matrix
    for (let i of topEigenvalues) {
      const index = eigen.values.indexOf(i)
      for (let j = 0; j < featureMatrix.length; j++) {
        featureMatrix[j].push(eigen.vectors[j][index])
      }
    }
    // then multiply feature matrix by dataSet
    return transpose(multiply(transpose(featureMatrix), transpose(dataSet)))
    // return PCA matrix
  },
  // takes in data points and labels, returns a model. use SVM.predict(testdata) to get array of labels.
  'svm': (dataPoints, labels, c = 1) => {
    let SVM = new svm.SVM()
    SVM.train(dataPoints, labels, { C: c })
    return SVM
  },
  "svmPrototype": Object.getPrototypeOf(svmPrototype)
}

// console.log(formulas.svmPrototype)
// let SVM = new svm.SVM()
// SVM = { ...SVM, ...Object.getPrototypeOf(SVM) }
// console.log(SVM)
// let datapoints = [[0, 0, 1], [0, 1, 2], [1, 0, 4], [1, 1, 5]];
// let labels = [1, -1, 1, 1];
// // let SVM = new svm.SVM()
// SVM.train(datapoints, labels, { C: 1.0 }); // C is a parameter to SVM
// // console.log(SVM)
// let testdata = [[1, 1, 5]]
// let testlabels = SVM.predict(testdata);
// console.log(testlabels)
// console.log(SVM)

// let test = {
//   "N": 11,
//   "D": 784,
//   "b": 0.44488490138823583,
//   "kernelType": "linear",
//   "w": [
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0.009638743021222447,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0.02217157066703845,
//     -0.02583269575532185,
//     -0.02583269575532185,
//     -0.02583269575532185,
//     -0.02583269575532185,
//     0,
//     0.009638743021222447,
//     0.009638743021222447,
//     0.050320250563559675,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0.02217157066703845,
//     -0.003661125088283399,
//     -0.02583269575532185,
//     0,
//     0,
//     -0.02583269575532185,
//     -0.016193952734099404,
//     0.009638743021222447,
//     -0.017977828261261656,
//     0.021990283613675936,
//     -0.010352138688622083,
//     -0.010352138688622083,
//     0,
//     0,
//     0,
//     0,
//     0.027447331535933123,
//     0.027447331535933123,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0.02217157066703845,
//     0.02217157066703845,
//     -0.003661125088283399,
//     0.04190908406075508,
//     0,
//     0,
//     0.009638743021222447,
//     -0.016193952734099404,
//     -0.0438105240165835,
//     -0.02832996694988374,
//     0.021990283613675936,
//     -0.017977828261261656,
//     -0.02832996694988374,
//     -0.010352138688622083,
//     0,
//     0,
//     0.027447331535933123,
//     0.027447331535933123,
//     0.027447331535933123,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0.02217157066703845,
//     0.02217157066703845,
//     -0.02583269575532185,
//     -0.003661125088283399,
//     0.04190908406075508,
//     0,
//     0,
//     0.009638743021222447,
//     0,
//     -0.05416266270520559,
//     0,
//     0.050320250563559675,
//     -0.017748716274486393,
//     -0.03572654453574805,
//     -0.028100854963108476,
//     -0.017748716274486393,
//     0.00969861526144673,
//     0.027447331535933123,
//     0,
//     0.027447331535933123,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0.02217157066703845,
//     0,
//     -0.02583269575532185,
//     0.02217157066703845,
//     0.04190908406075508,
//     0,
//     0.009638743021222447,
//     0,
//     -0.02832996694988374,
//     -0.036184834443943936,
//     -0.024444992328709406,
//     0.00812654196036388,
//     -0.08768557412208072,
//     -0.08791468610885599,
//     -0.046374500932835544,
//     0.00969861526144673,
//     0.027447331535933123,
//     0,
//     0,
//     0.027447331535933123,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0.02217157066703845,
//     0.02217157066703845,
//     0,
//     -0.02583269575532185,
//     0.02217157066703845,
//     0.04190908406075508,
//     0.009638743021222447,
//     0,
//     0,
//     -0.02832996694988374,
//     -0.050277688084031255,
//     -0.06324058179337132,
//     -0.012920331229811642,
//     0,
//     -0.024444992328709406,
//     -0.046374500932835544,
//     0.00969861526144673,
//     -0.017748716274486393,
//     0,
//     0,
//     0.027447331535933123,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     -0.02583269575532185,
//     0.02217157066703845,
//     0.04190908406075508,
//     0,
//     0,
//     0,
//     -0.052774959278593145,
//     -0.08907327754869317,
//     -0.06324058179337132,
//     0.050320250563559675,
//     0,
//     -0.024444992328709406,
//     -0.046374500932835544,
//     -0.04549186551888493,
//     -0.017748716274486393,
//     0,
//     0,
//     0.027447331535933123,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     -0.02583269575532185,
//     0.02217157066703845,
//     0.04190908406075508,
//     0,
//     0,
//     -0.017977828261261656,
//     -0.052774959278593145,
//     -0.08907327754869317,
//     0,
//     0.050320250563559675,
//     0,
//     -0.024444992328709406,
//     -0.02832996694988374,
//     -0.04549186551888493,
//     -0.017748716274486393,
//     0,
//     0,
//     0.027447331535933123,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     -0.02583269575532185,
//     0.02217157066703845,
//     0.04190908406075508,
//     0,
//     0,
//     -0.02832996694988374,
//     -0.05254584729181788,
//     -0.08907327754869317,
//     0,
//     0.050320250563559675,
//     0,
//     -0.024444992328709406,
//     -0.02832996694988374,
//     -0.04549186551888493,
//     -0.017748716274486393,
//     0,
//     0,
//     0.027447331535933123,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     -0.02583269575532185,
//     0.02217157066703845,
//     0.04190908406075508,
//     0,
//     0,
//     -0.052774959278593145,
//     -0.017748716274486393,
//     -0.07132456127420678,
//     0,
//     0.050320250563559675,
//     0,
//     -0.024444992328709406,
//     -0.02832996694988374,
//     -0.04549186551888493,
//     0,
//     -0.017748716274486393,
//     0,
//     0.027447331535933123,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     -0.02583269575532185,
//     0.02217157066703845,
//     0.04190908406075508,
//     0,
//     0,
//     -0.052774959278593145,
//     -0.017748716274486393,
//     -0.07132456127420678,
//     -0.04549186551888493,
//     0.050320250563559675,
//     0,
//     0,
//     -0.09826682479747807,
//     0,
//     0,
//     -0.017748716274486393,
//     0,
//     0.027447331535933123,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     -0.02583269575532185,
//     0.02217157066703845,
//     0.04190908406075508,
//     0,
//     0,
//     -0.052774959278593145,
//     -0.06017153686445745,
//     -0.02583269575532185,
//     -0.04549186551888493,
//     0.0048283850446747476,
//     -0.04549186551888493,
//     -0.06993685784759433,
//     -0.09826682479747807,
//     0,
//     0,
//     0,
//     -0.017748716274486393,
//     0.027447331535933123,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0.02217157066703845,
//     0.02217157066703845,
//     0.02217157066703845,
//     -0.003661125088283399,
//     -0.003661125088283399,
//     0.06408065472779353,
//     0.02217157066703845,
//     0.02217157066703845,
//     -0.028100854963108476,
//     -0.07052367555307953,
//     -0.02583269575532185,
//     0,
//     0.050320250563559675,
//     0,
//     -0.03479713101733149,
//     -0.0008826354139506165,
//     0.027447331535933123,
//     0.027447331535933123,
//     0.027447331535933123,
//     0.00969861526144673,
//     0.027447331535933123,
//     0.027447331535933123,
//     0.027447331535933123,
//     0.027447331535933123,
//     0.027447331535933123,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     -0.02583269575532185,
//     0.04190908406075508,
//     0,
//     0.02217157066703845,
//     -0.017748716274486393,
//     -0.07052367555307953,
//     -0.06825551634529291,
//     0,
//     0.050320250563559675,
//     -0.024444992328709406,
//     -0.03479713101733149,
//     -0.017977828261261656,
//     0,
//     0,
//     0,
//     -0.017748716274486393,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     -0.02583269575532185,
//     0.01607638830543323,
//     0,
//     0,
//     0,
//     -0.053933550718430326,
//     -0.06062982677265334,
//     -0.04242282058997106,
//     0.03234242230229802,
//     -0.04242282058997106,
//     -0.02832996694988374,
//     -0.017977828261261656,
//     0,
//     0,
//     0,
//     -0.017748716274486393,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0.01607638830543323,
//     -0.016193952734099404,
//     -0.016193952734099404,
//     0.009638743021222447,
//     -0.033942669008585793,
//     -0.0007133956673996359,
//     -0.014806249307486958,
//     0.02587525823485027,
//     -0.0007133956673996359,
//     -0.0007133956673996359,
//     0.009638743021222447,
//     0.009638743021222447,
//     0.009638743021222447,
//     0,
//     -0.017748716274486393,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     -0.02583269575532185,
//     -0.02583269575532185,
//     -0.04358141202980824,
//     -0.028100854963108476,
//     -0.028100854963108476,
//     -0.010352138688622083,
//     -0.010352138688622083,
//     0,
//     0,
//     0,
//     0,
//     -0.017748716274486393,
//     -0.017748716274486393,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     -0.017748716274486393,
//     -0.017748716274486393,
//     -0.017748716274486393,
//     0,
//     0,
//     0,
//     -0.017748716274486393,
//     -0.017748716274486393,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     -0.017748716274486393,
//     -0.017748716274486393,
//     -0.017748716274486393,
//     -0.017748716274486393,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0
//   ]
// }
// Object.setPrototypeOf(test, Object.getPrototypeOf(SVM))
// console.log(test, SVM)

// let SVM = new svm.SVM()
// let datapoints = [data[0][0].data, data[0][1].data, data[1][0].data, data[1][1].data]
// let labels = [-1, -1, 1, 1]
// SVM.train(datapoints, labels, { C: 1.0 })
// console.log(SVM.predict([data[0][2].data]))
// console.log(SVM)

export default formulas